name: Access AWS Secrets Manager

on:
  push:
    branches:
      - main

jobs:
  access-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Print Environment Variables
        run: env

      - name: Check AWS CLI version
        run: aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::755317065494:role/github-actions-secrets-manager-aws-credential-access-role
          aws-region: us-east-2

      - name: Retrieve secret
        run: |
          secret_value=$(aws secretsmanager get-secret-value --secret-id gitops-infra-github-actions-cicd-aws-credentials --query SecretString --output text)
          echo "Secret Value: $secret_value"





# name: Terraform CI/CD

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:  # Allows manual triggering of the destroy job

# jobs:
#   terraform:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install AWS CLI and jq
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y awscli jq

#       - name: Configure AWS CLI
#         run: |
#           aws configure set region us-east-2

#       - name: Assume IAM Role
#         id: assume-role
#         run: |
#           ROLE_ARN="arn:aws:iam::755317065494:role/github-actions-secrets-manager-aws-credential-access-role"
#           CREDENTIALS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name github-actions-session)
#           echo "AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
#           echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
#           echo "AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

#       - name: Retrieve AWS Secrets
#         id: retrieve-secrets
#         run: |
#           # Retrieve the AWS credentials from Secrets Manager
#           CREDENTIALS_JSON=$(aws secretsmanager get-secret-value --secret-id my/aws/credentials --query 'SecretString' --output text)
#           AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS_JSON | jq -r '.AWS_ACCESS_KEY_ID')
#           AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS_JSON | jq -r '.AWS_SECRET_ACCESS_KEY')
#           echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
#           echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Format
#         run: |
#           terraform fmt -check
#         working-directory: ./terraform

#       - name: Terraform Validate
#         run: |
#           terraform validate
#         working-directory: ./terraform

#       - name: Terraform Plan
#         id: plan
#         run: |
#           terraform plan -out=tfplan
#         working-directory: ./terraform

#       - name: Output Terraform Plan
#         run: |
#           terraform show tfplan
#         working-directory: ./terraform

#       - name: Upload Terraform Plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform/tfplan  # Adjust the path as necessary

#   apply:
#     runs-on: ubuntu-latest
#     environment:
#       name: production  # Specify the environment name here
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform  # Specify where to download the artifact

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Apply
#         run: |
#           terraform apply -auto-approve tfplan
#         working-directory: ./terraform
#         continue-on-error: false  # Ensures that any failure in this step stops the workflow

#   destroy:
#     runs-on: ubuntu-latest
#     if: github.event_name == 'workflow_dispatch'  # Runs only on manual triggers

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Destroy
#         run: |
#           terraform destroy -auto-approve
#         working-directory: ./terraform





# name: Terraform CI/CD

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:  # Allows manual triggering of the destroy job

# jobs:
#   terraform:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Format
#         run: |
#           terraform fmt -check
#         working-directory: ./terraform

#       - name: Terraform Validate
#         run: |
#           terraform validate
#         working-directory: ./terraform

#       - name: Terraform Plan
#         id: plan
#         run: |
#           terraform plan -out=tfplan
#         working-directory: ./terraform

#       - name: Output Terraform Plan
#         run: |
#           terraform show tfplan
#         working-directory: ./terraform

#       - name: Upload Terraform Plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform/tfplan  # Adjust the path as necessary

#   apply:
#     runs-on: ubuntu-latest
#     environment:
#       name: production  # Specify the environment name here
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform  # Specify where to download the artifact

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Apply
#         run: |
#           terraform apply -auto-approve tfplan
#         working-directory: ./terraform
#         continue-on-error: false  # Ensures that any failure in this step stops the workflow

#   destroy:
#     runs-on: ubuntu-latest
#     if: github.event_name == 'workflow_dispatch'  # Runs only on manual triggers

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: |
#           terraform init
#         working-directory: ./terraform

#       - name: Terraform Destroy
#         run: |
#           terraform destroy -auto-approve
#         working-directory: ./terraform

# #the above code adds artifact to the workflow and ensures that after terraform plan is created, It id saved and uploaded as an artifact and then called in the apply job to apply the plan


# # name: Terraform CI/CD

# # on:
# #   push:
# #     branches:
# #       - main
# #   workflow_dispatch:  # Allows manual triggering of the destroy job

# # jobs:
# #   terraform:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: |
# #           terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Format
# #         run: |
# #           terraform fmt -check
# #         working-directory: ./terraform

# #       - name: Terraform Validate
# #         run: |
# #           terraform validate
# #         working-directory: ./terraform

# #       - name: Terraform Plan
# #         run: |
# #           terraform plan -out=tfplan
# #         working-directory: ./terraform

# #       - name: Output Terraform Plan
# #         run: |
# #           terraform show tfplan
# #         working-directory: ./terraform

# #   apply:
# #     runs-on: ubuntu-latest
# #     environment:
# #       name: production  # Specify the environment name here
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: |
# #           terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Apply
# #         run: |
# #           terraform apply -auto-approve tfplan
# #         working-directory: ./terraform
# #         continue-on-error: false  # Ensures that any failure in this step stops the workflow

# #   destroy:
# #     runs-on: ubuntu-latest
# #     if: github.event_name == 'workflow_dispatch'  # Runs only on manual triggers

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: |
# #           terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Destroy
# #         run: |
# #           terraform destroy -auto-approve
# #         working-directory: ./terraform
# # ##rt




# # name: Terraform CI/CD

# # on:
# #   push:
# #     branches:
# #       - main
# #   workflow_dispatch:  # Allows manual triggering of the destroy job

# # jobs:
# #   terraform:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: |
# #           terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Format
# #         run: |
# #           terraform fmt -check
# #         working-directory: ./terraform

# #       - name: Terraform Validate
# #         run: |
# #           terraform validate
# #         working-directory: ./terraform

# #       - name: Terraform Plan
# #         run: |
# #           terraform plan
# #         working-directory: ./terraform

# #       - name: Terraform Apply
# #         run: |
# #           terraform apply -auto-approve
# #         working-directory: ./terraform
# #         continue-on-error: false  # Ensures that any failure in this step stops the workflow

# #       - name: Output Terraform Plan
# #         run: |
# #           terraform show
# #         working-directory: ./terraform

# #   destroy:
# #     runs-on: ubuntu-latest
# #     if: github.event_name == 'workflow_dispatch'  # Runs only on manual triggers

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: |
# #           terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Destroy
# #         run: |
# #           terraform destroy -auto-approve
# #         working-directory: ./terraform
